{
    "name": "ARMCC V6",
    "defines": [
        "__UVISION_VERSION=526"
    ],
    "useUnixPath": true,
    "global": {
        "microcontroller-cpu": {
            "type": "keyValue",
            "command": "-mcpu=",
            "enum": {
                "cortex-m0": "cortex-m0",
                "cortex-m0+": "cortex-m0plus",
                "cortex-m3": "cortex-m3",
                "cortex-m4-none": "cortex-m4",
                "cortex-m4-sp": "cortex-m4",
                "cortex-m7-none": "cortex-m7",
                "cortex-m7-sp": "cortex-m7",
                "cortex-m7-dp": "cortex-m7"
            },
            "group": [
                "c/cpp",
                "asm-clang"
            ],
            "description": ""
        },
        "microcontroller-fpu": {
            "type": "selectable",
            "command": {
                "cortex-m0": "",
                "cortex-m0+": "",
                "cortex-m3": "",
                "cortex-m4-none": "-mfpu=none",
                "cortex-m4-sp": "-mfpu=fpv4-sp-d16",
                "cortex-m7-none": "-mfpu=none",
                "cortex-m7-sp": "-mfpu=fpv5-sp-d16",
                "cortex-m7-dp": "-mfpu=fpv5-d16"
            },
            "group": [
                "c/cpp",
                "asm-clang"
            ],
            "description": ""
        },
        "microcontroller-float": {
            "type": "selectable",
            "command": {
                "cortex-m0": "",
                "cortex-m0+": "",
                "cortex-m3": "",
                "cortex-m4-none": "-mfloat-abi=soft",
                "cortex-m4-sp": "-mfloat-abi=hard",
                "cortex-m7-none": "-mfloat-abi=soft",
                "cortex-m7-sp": "-mfloat-abi=hard",
                "cortex-m7-dp": "-mfloat-abi=hard"
            },
            "group": [
                "c/cpp",
                "asm-clang"
            ],
            "description": ""
        },
        "misc-controls": {
            "type": "list",
            "command": "",
            "group": [
                "c/cpp",
                "asm",
                "asm-clang",
                "linker"
            ],
            "description": ""
        }
    },
    "groups": {
        "c/cpp": {
            "$path": "ARMCLANG\\bin\\armclang.exe",
            "$encoding": "UTF8",
            "$includes": {
                "body": "-I${value}"
            },
            "$defines": {
                "body": "-D${key}=\"${value}\""
            },
            "$output": "-o ${out} -MD ${in}",
            "$invoke": {
                "useFile": true,
                "body": "@${value}"
            },
            "$default": [
                "--target=arm-arm-none-eabi",
                "-c",
                "-gdwarf-3"
            ],
            "$language-c": {
                "type": "keyValue",
                "command": "-xc -std=",
                "enum": {
                    "default": "gnu11",
                    "c90": "c90",
                    "gnu90": "gnu90",
                    "c99": "c99",
                    "gnu99": "gnu99",
                    "c11": "c11",
                    "gnu11": "gnu11"
                },
                "description": ""
            },
            "$language-cpp": {
                "type": "keyValue",
                "command": "-xc++ -std=",
                "enum": {
                    "default": "gnu++98",
                    "c++98": "c++98",
                    "gnu++98": "gnu++98",
                    "c++11": "c++11",
                    "gnu++11": "gnu++11",
                    "c++03": "c++03",
                    "c++14": "c++14"
                },
                "description": ""
            },
            "use-microLIB": {
                "type": "selectable",
                "command": {
                    "true": "-D__MICROLIB",
                    "false": ""
                },
                "description": ""
            },
            "execute-only-code": {
                "type": "selectable",
                "command": {
                    "true": "-mexecute-only",
                    "false": ""
                },
                "description": ""
            },
            "optimization": {
                "type": "keyValue",
                "command": "",
                "enum": {
                    "default": "",
                    "level-0": "-O0",
                    "level-1": "-O1",
                    "level-2": "-O2",
                    "level-3": "-O3",
                    "level-fast": "-Ofast",
                    "level-balanced": "-Os",
                    "level-image-size": "-Oz"
                },
                "description": ""
            },
            "link-time-optimization": {
                "type": "selectable",
                "command": {
                    "true": "-flto",
                    "false": ""
                },
                "description": ""
            },
            "split-load-and-store-multiple": {
                "type": "selectable",
                "command": {
                    "true": "-ldm-stm",
                    "false": ""
                },
                "description": ""
            },
            "one-elf-section-per-function": {
                "type": "selectable",
                "command": {
                    "true": "-ffunction-sections",
                    "false": "-fno-function-sections"
                },
                "description": ""
            },
            "turn-Warning-into-errors": {
                "type": "selectable",
                "command": {
                    "true": "-Werror",
                    "false": ""
                },
                "description": ""
            },
            "plain-char-is-signed": {
                "type": "selectable",
                "command": {
                    "true": "-fsigned-char",
                    "false": "-funsigned-char"
                },
                "description": ""
            },
            "read-only-position-independent": {
                "type": "selectable",
                "command": {
                    "true": "-fropi",
                    "false": ""
                },
                "description": ""
            },
            "read-write-position-independent": {
                "type": "selectable",
                "command": {
                    "true": "-frwpi",
                    "false": ""
                },
                "description": ""
            },
            "short-enums#wchar": {
                "type": "selectable",
                "command": {
                    "true": "-fshort-enums -fshort-wchar",
                    "false": ""
                },
                "description": ""
            },
            "use-rtti": {
                "type": "selectable",
                "command": {
                    "true": "",
                    "false": "-fno-rtti"
                },
                "description": ""
            },
            "warnings": {
                "type": "keyValue",
                "command": "",
                "enum": {
                    "default": "-Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality",
                    "unspecified": "",
                    "no-warnings": "-w",
                    "all-warnings": "-Weverything -Wno-packed -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality",
                    "ac5-like-warnings": "-Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality",
                    "misra-compatible": "-Wno-packed -Wno-missing-variable-declarations -Wno-missing-prototypes -Wno-missing-noreturn -Wno-sign-conversion -Wno-nonportable-include-path -Wno-reserved-id-macro -Wno-unused-macros -Wno-documentation-unknown-command -Wno-documentation -Wno-license-management -Wno-parentheses-equality -Wno-covered-switch-default -Wno-unreachable-code-break"
                },
                "description": ""
            }
        },
        "asm": {
            "$path": "ARMCLANG\\bin\\armasm.exe",
            "$includes": {
                "body": "-I${value}"
            },
            "$defines": {
                "body": "--pd \"${key} SETA ${value}\""
            },
            "$output": "--xref -o ${out} ${in}",
            "$invoke": {
                "useFile": true,
                "body": "--Via ${value}"
            },
            "$default": [
                "-g"
            ],
            "use-microLIB": {
                "type": "selectable",
                "command": {
                    "true": "--pd \"__MICROLIB SETA 1\"",
                    "false": ""
                },
                "description": ""
            },
            "microcontroller-cpu": {
                "type": "keyValue",
                "command": "--cpu ",
                "enum": {
                    "cortex-m0": "Cortex-M0",
                    "cortex-m0+": "Cortex-M0+",
                    "cortex-m3": "Cortex-M3",
                    "cortex-m4-none": "Cortex-M4 --fpu=SoftVFP",
                    "cortex-m4-sp": "Cortex-M4.fp",
                    "cortex-m7-none": "Cortex-M7 --fpu=SoftVFP",
                    "cortex-m7-sp": "Cortex-M7.fp.sp",
                    "cortex-m7-dp": "Cortex-M7.fp.dp"
                },
                "description": ""
            }
        },
        "asm-clang": {
            "$path": "ARMCLANG\\bin\\armclang.exe",
            "$encoding": "UTF8",
            "$includes": {
                "body": "-I${value}"
            },
            "$defines": {
                "body": "-D${key}=\"${value}\""
            },
            "$output": "-o ${out} ${in}",
            "$invoke": {
                "useFile": true,
                "body": "@${value}"
            },
            "$default": [
                "-x assembler-with-cpp",
                "-c",
                "-gdwarf-3"
            ],
            "use-microLIB": {
                "type": "selectable",
                "command": {
                    "true": "-D__MICROLIB",
                    "false": ""
                },
                "description": ""
            },
            "target": {
                "type": "keyValue",
                "command": "--target=",
                "enum": {
                    "cortex-m0": "arm-arm-none-eabi",
                    "cortex-m0+": "arm-arm-none-eabi",
                    "cortex-m3": "arm-arm-none-eabi",
                    "cortex-m4-none": "armv7em-arm-none-eabi",
                    "cortex-m4-sp": "arm-arm-none-eabi",
                    "cortex-m7-none": "arm-arm-none-eabi",
                    "cortex-m7-sp": "arm-arm-none-eabi",
                    "cortex-m7-dp": "arm-arm-none-eabi"
                },
                "description": ""
            }
        },
        "linker": {
            "$path": "ARMCLANG\\bin\\armlink.exe",
            "$invoke": {
                "useFile": true,
                "body": "--Via ${value}"
            },
            "$output": "${in} -o ${out}",
            "$default-tail": [
                "--strict",
                "--summary_stderr --info summarysizes --map --load_addr_map_info --xref --callgraph --symbols",
                "--info sizes --info totals --info unused --info veneers"
            ],
            "$matcher": [
                "^\\s*total.*size"
            ],
            "$ramMatcher": "^\\s*Total RW  Size \\(RW Data \\+ ZI Data\\)\\s+(\\d+)",
            "$romMatcher": "^\\s*Total ROM Size \\(Code \\+ RO Data \\+ RW Data\\)\\s+(\\d+)",
            "$linkMap": {
                "type": "value",
                "command": "--list ${mapPath}",
                "description": ""
            },
            "use-microLIB": {
                "type": "selectable",
                "command": {
                    "true": "--library_type=microlib",
                    "false": ""
                },
                "description": ""
            },
            "microcontroller-cpu": {
                "type": "keyValue",
                "command": "--cpu=",
                "enum": {
                    "cortex-m0": "Cortex-M0",
                    "cortex-m0+": "Cortex-M0+",
                    "cortex-m3": "Cortex-M3",
                    "cortex-m4-none": "Cortex-M4 --fpu=SoftVFP",
                    "cortex-m4-sp": "Cortex-M4.fp",
                    "cortex-m7-none": "Cortex-M7 --fpu=SoftVFP",
                    "cortex-m7-sp": "Cortex-M7.fp.sp",
                    "cortex-m7-dp": "Cortex-M7.fp.dp"
                },
                "description": ""
            },
            "link-scatter": {
                "type": "value",
                "command": "--scatter ",
                "description": ""
            }
        },
        "output": {
            "$path": "ARMCLANG\\bin\\fromelf.exe",
            "$outputSuffix": ".hex",
            "command": "--i32combined ${linkerOutput} --output ${output}"
        }
    }
}